name: "PR - Test Updated Templates"
on:
  pull_request:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      templates: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            sap-cap-javascript-node: ./**/sap-cap-javascript-node/**

  test:
    needs: [detect-changes]
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        templates: ${{ fromJSON(needs.detect-changes.outputs.templates) }}
    steps:
      - uses: actions/checkout@v2

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Generating tests for '${{ matrix.templates }}'"
        run: echo "${{ matrix.templates }}"

      - name: Configure template
        run: |
          set -e
          cd src/${{ matrix.templates }}

          # Configure templates only if `devcontainer-template.json` contains the `options` property.
          optionProp=( $(jq -r '.options' devcontainer-template.json) )

          if [ "${optionProp}" != "" ] && [ "${optionProp}" != "null" ] ; then  
            options=( $(jq -r '.options | keys[]' devcontainer-template.json) )

            if [ "${options[0]}" != "" ] && [ "${options[0]}" != "null" ] ; then
              echo "(!) Configuring template options within 'src/${{ matrix.templates }}' folder"
              for option in "${options[@]}"
              do
                echo $option
                echo "$option"
                echo option
                # option_key="\${templateOption:$option}"
                # option_value=$(jq -r ".options | .${option} | .default" devcontainer-template.json)

                # if [ "${option_value}" = "" ] || [ "${option_value}" = "null" ] ; then
                #   echo "Template '${{ matrix.templates }}' is missing a default value for option '${option}'"
                #   exit 1
                # fi

                # echo "(!) Replacing '${option_key}' with '${option_value}'"
                # option_value_escaped=$(sed -e 's/[]\/$*.^[]/\\&/g' <<<"${option_value}")
                # find ./ -type f -print0 | xargs -0 sed -i "s/${option_key}/${option_value_escaped}/g"
              done
            fi
          fi